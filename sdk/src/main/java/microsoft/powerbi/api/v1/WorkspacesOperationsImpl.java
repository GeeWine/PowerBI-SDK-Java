/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package microsoft.powerbi.api.v1;

import com.google.common.reflect.TypeToken;
import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import java.io.IOException;
import microsoft.powerbi.api.v1.models.ODataResponseListWorkspace;
import microsoft.powerbi.api.v1.models.Workspace;
import okhttp3.ResponseBody;
import retrofit2.Call;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.Response;
import retrofit2.Retrofit;

/**
 * An instance of this class provides access to all the operations defined
 * in WorkspacesOperations.
 */
public final class WorkspacesOperationsImpl implements WorkspacesOperations {
    /** The Retrofit service to perform REST calls. */
    private WorkspacesService service;
    /** The service client containing this operation class. */
    private PowerBIClient client;

    /**
     * Initializes an instance of WorkspacesOperations.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public WorkspacesOperationsImpl(Retrofit retrofit, PowerBIClient client) {
        this.service = retrofit.create(WorkspacesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for WorkspacesOperations to be
     * used by Retrofit to perform actually REST calls.
     */
    interface WorkspacesService {
        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("v1.0/collections/{collectionName}/workspaces")
        Call<ResponseBody> getWorkspacesByCollectionName(@Path("collectionName") String collectionName);

        @Headers("Content-Type: application/json; charset=utf-8")
        @POST("v1.0/collections/{collectionName}/workspaces")
        Call<ResponseBody> postWorkspace(@Path("collectionName") String collectionName);

    }

    /**
     * Returns a list of workspaces for the specified collection.
     *
     * @param collectionName The workspace collection name
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the ODataResponseListWorkspace object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<ODataResponseListWorkspace> getWorkspacesByCollectionName(String collectionName) throws ServiceException, IOException, IllegalArgumentException {
        if (collectionName == null) {
            throw new IllegalArgumentException("Parameter collectionName is required and cannot be null.");
        }
        Call<ResponseBody> call = service.getWorkspacesByCollectionName(collectionName);
        return getWorkspacesByCollectionNameDelegate(call.execute());
    }

    /**
     * Returns a list of workspaces for the specified collection.
     *
     * @param collectionName The workspace collection name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link Call} object
     */
    public ServiceCall getWorkspacesByCollectionNameAsync(String collectionName, final ServiceCallback<ODataResponseListWorkspace> serviceCallback) throws IllegalArgumentException {
        if (serviceCallback == null) {
            throw new IllegalArgumentException("ServiceCallback is required for async calls.");
        }
        if (collectionName == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter collectionName is required and cannot be null."));
            return null;
        }
        Call<ResponseBody> call = service.getWorkspacesByCollectionName(collectionName);
        final ServiceCall serviceCall = new ServiceCall(call);
        call.enqueue(new ServiceResponseCallback<ODataResponseListWorkspace>(serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    serviceCallback.success(getWorkspacesByCollectionNameDelegate(response));
                } catch (ServiceException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<ODataResponseListWorkspace> getWorkspacesByCollectionNameDelegate(Response<ResponseBody> response) throws ServiceException, IOException, IllegalArgumentException {
        return new ServiceResponseBuilder<ODataResponseListWorkspace, ServiceException>(this.client.getMapperAdapter())
                .register(200, new TypeToken<ODataResponseListWorkspace>() { }.getType())
                .build(response);
    }

    /**
     * Creates a new workspace within a workspace collection.
     *
     * @param collectionName The workspace collection name
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the Workspace object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Workspace> postWorkspace(String collectionName) throws ServiceException, IOException, IllegalArgumentException {
        if (collectionName == null) {
            throw new IllegalArgumentException("Parameter collectionName is required and cannot be null.");
        }
        Call<ResponseBody> call = service.postWorkspace(collectionName);
        return postWorkspaceDelegate(call.execute());
    }

    /**
     * Creates a new workspace within a workspace collection.
     *
     * @param collectionName The workspace collection name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link Call} object
     */
    public ServiceCall postWorkspaceAsync(String collectionName, final ServiceCallback<Workspace> serviceCallback) throws IllegalArgumentException {
        if (serviceCallback == null) {
            throw new IllegalArgumentException("ServiceCallback is required for async calls.");
        }
        if (collectionName == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter collectionName is required and cannot be null."));
            return null;
        }
        Call<ResponseBody> call = service.postWorkspace(collectionName);
        final ServiceCall serviceCall = new ServiceCall(call);
        call.enqueue(new ServiceResponseCallback<Workspace>(serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    serviceCallback.success(postWorkspaceDelegate(response));
                } catch (ServiceException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Workspace> postWorkspaceDelegate(Response<ResponseBody> response) throws ServiceException, IOException, IllegalArgumentException {
        return new ServiceResponseBuilder<Workspace, ServiceException>(this.client.getMapperAdapter())
                .register(201, new TypeToken<Workspace>() { }.getType())
                .build(response);
    }

}
