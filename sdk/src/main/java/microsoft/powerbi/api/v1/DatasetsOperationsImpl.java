/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package microsoft.powerbi.api.v1;

import com.google.common.reflect.TypeToken;
import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.Map;
import microsoft.powerbi.api.v1.models.Dataset;
import microsoft.powerbi.api.v1.models.ODataResponseListDataset;
import microsoft.powerbi.api.v1.models.ODataResponseListDatasource;
import microsoft.powerbi.api.v1.models.ODataResponseListGatewayDatasource;
import microsoft.powerbi.api.v1.models.ODataResponseListTable;
import okhttp3.ResponseBody;
import retrofit2.Call;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.Response;
import retrofit2.Retrofit;

/**
 * An instance of this class provides access to all the operations defined
 * in DatasetsOperations.
 */
public final class DatasetsOperationsImpl implements DatasetsOperations {
    /** The Retrofit service to perform REST calls. */
    private DatasetsService service;
    /** The service client containing this operation class. */
    private PowerBIClient client;

    /**
     * Initializes an instance of DatasetsOperations.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public DatasetsOperationsImpl(Retrofit retrofit, PowerBIClient client) {
        this.service = retrofit.create(DatasetsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for DatasetsOperations to be
     * used by Retrofit to perform actually REST calls.
     */
    interface DatasetsService {
        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("v1.0/collections/{collectionName}/workspaces/{workspaceId}/datasets")
        Call<ResponseBody> getDatasets(@Path("collectionName") String collectionName, @Path("workspaceId") String workspaceId);

        @Headers("Content-Type: application/json; charset=utf-8")
        @POST("v1.0/collections/{collectionName}/workspaces/{workspaceId}/datasets")
        Call<ResponseBody> postDataset(@Path("collectionName") String collectionName, @Path("workspaceId") String workspaceId, @Body Dataset dataset);

        @Headers("Content-Type: application/json; charset=utf-8")
        @POST("v1.0/collections/{collectionName}/workspaces/{workspaceId}/datasets/{datasetKey}/tables/{tableName}/rows")
        Call<ResponseBody> postRows(@Path("collectionName") String collectionName, @Path("workspaceId") String workspaceId, @Path("datasetKey") String datasetKey, @Path("tableName") String tableName, @Body Object requestMessage);

        @Headers("Content-Type: application/json; charset=utf-8")
        @HTTP(path = "v1.0/collections/{collectionName}/workspaces/{workspaceId}/datasets/{datasetKey}/tables/{tableName}/rows", method = "DELETE", hasBody = true)
        Call<ResponseBody> deleteRows(@Path("collectionName") String collectionName, @Path("workspaceId") String workspaceId, @Path("datasetKey") String datasetKey, @Path("tableName") String tableName);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("v1.0/collections/{collectionName}/workspaces/{workspaceId}/datasets/{datasetKey}/tables")
        Call<ResponseBody> getTables(@Path("collectionName") String collectionName, @Path("workspaceId") String workspaceId, @Path("datasetKey") String datasetKey);

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("v1.0/collections/{collectionName}/workspaces/{workspaceId}/datasets/{datasetKey}/tables/{tableName}")
        Call<ResponseBody> putTable(@Path("collectionName") String collectionName, @Path("workspaceId") String workspaceId, @Path("datasetKey") String datasetKey, @Path("tableName") String tableName, @Body Object requestMessage);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("v1.0/collections/{collectionName}/workspaces/{workspaceId}/datasets/{datasetKey}")
        Call<ResponseBody> getDatasetById(@Path("collectionName") String collectionName, @Path("workspaceId") String workspaceId, @Path("datasetKey") String datasetKey);

        @Headers("Content-Type: application/json; charset=utf-8")
        @HTTP(path = "v1.0/collections/{collectionName}/workspaces/{workspaceId}/datasets/{datasetKey}", method = "DELETE", hasBody = true)
        Call<ResponseBody> deleteDatasetById(@Path("collectionName") String collectionName, @Path("workspaceId") String workspaceId, @Path("datasetKey") String datasetKey);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("v1.0/collections/{collectionName}/workspaces/{workspaceId}/datasets/{datasetKey}/Default.GetBoundGatewayDatasources")
        Call<ResponseBody> getGatewayDatasources(@Path("collectionName") String collectionName, @Path("workspaceId") String workspaceId, @Path("datasetKey") String datasetKey);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("v1.0/collections/{collectionName}/workspaces/{workspaceId}/datasets/{datasetKey}/datasources")
        Call<ResponseBody> getDatasources(@Path("collectionName") String collectionName, @Path("workspaceId") String workspaceId, @Path("datasetKey") String datasetKey);

        @Headers("Content-Type: application/json; charset=utf-8")
        @POST("v1.0/collections/{collectionName}/workspaces/{workspaceId}/datasets/{datasetKey}/Default.SetAllConnections")
        Call<ResponseBody> setAllConnections(@Path("collectionName") String collectionName, @Path("workspaceId") String workspaceId, @Path("datasetKey") String datasetKey, @Body Map<String, Object> parameters);

    }

    /**
     * Returns the datasets.
     *
     * @param collectionName The workspace collection name
     * @param workspaceId The workspace id
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the ODataResponseListDataset object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<ODataResponseListDataset> getDatasets(String collectionName, String workspaceId) throws ServiceException, IOException, IllegalArgumentException {
        if (collectionName == null) {
            throw new IllegalArgumentException("Parameter collectionName is required and cannot be null.");
        }
        if (workspaceId == null) {
            throw new IllegalArgumentException("Parameter workspaceId is required and cannot be null.");
        }
        Call<ResponseBody> call = service.getDatasets(collectionName, workspaceId);
        return getDatasetsDelegate(call.execute());
    }

    /**
     * Returns the datasets.
     *
     * @param collectionName The workspace collection name
     * @param workspaceId The workspace id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link Call} object
     */
    public ServiceCall getDatasetsAsync(String collectionName, String workspaceId, final ServiceCallback<ODataResponseListDataset> serviceCallback) throws IllegalArgumentException {
        if (serviceCallback == null) {
            throw new IllegalArgumentException("ServiceCallback is required for async calls.");
        }
        if (collectionName == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter collectionName is required and cannot be null."));
            return null;
        }
        if (workspaceId == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter workspaceId is required and cannot be null."));
            return null;
        }
        Call<ResponseBody> call = service.getDatasets(collectionName, workspaceId);
        final ServiceCall serviceCall = new ServiceCall(call);
        call.enqueue(new ServiceResponseCallback<ODataResponseListDataset>(serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    serviceCallback.success(getDatasetsDelegate(response));
                } catch (ServiceException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<ODataResponseListDataset> getDatasetsDelegate(Response<ResponseBody> response) throws ServiceException, IOException, IllegalArgumentException {
        return new ServiceResponseBuilder<ODataResponseListDataset, ServiceException>(this.client.getMapperAdapter())
                .register(200, new TypeToken<ODataResponseListDataset>() { }.getType())
                .build(response);
    }

    /**
     * Post a new entity to datasets.
     *
     * @param collectionName The workspace collection name
     * @param workspaceId The workspace id
     * @param dataset The entity to post
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the Object object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Object> postDataset(String collectionName, String workspaceId, Dataset dataset) throws ServiceException, IOException, IllegalArgumentException {
        if (collectionName == null) {
            throw new IllegalArgumentException("Parameter collectionName is required and cannot be null.");
        }
        if (workspaceId == null) {
            throw new IllegalArgumentException("Parameter workspaceId is required and cannot be null.");
        }
        if (dataset == null) {
            throw new IllegalArgumentException("Parameter dataset is required and cannot be null.");
        }
        Validator.validate(dataset);
        Call<ResponseBody> call = service.postDataset(collectionName, workspaceId, dataset);
        return postDatasetDelegate(call.execute());
    }

    /**
     * Post a new entity to datasets.
     *
     * @param collectionName The workspace collection name
     * @param workspaceId The workspace id
     * @param dataset The entity to post
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link Call} object
     */
    public ServiceCall postDatasetAsync(String collectionName, String workspaceId, Dataset dataset, final ServiceCallback<Object> serviceCallback) throws IllegalArgumentException {
        if (serviceCallback == null) {
            throw new IllegalArgumentException("ServiceCallback is required for async calls.");
        }
        if (collectionName == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter collectionName is required and cannot be null."));
            return null;
        }
        if (workspaceId == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter workspaceId is required and cannot be null."));
            return null;
        }
        if (dataset == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter dataset is required and cannot be null."));
            return null;
        }
        Validator.validate(dataset, serviceCallback);
        Call<ResponseBody> call = service.postDataset(collectionName, workspaceId, dataset);
        final ServiceCall serviceCall = new ServiceCall(call);
        call.enqueue(new ServiceResponseCallback<Object>(serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    serviceCallback.success(postDatasetDelegate(response));
                } catch (ServiceException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Object> postDatasetDelegate(Response<ResponseBody> response) throws ServiceException, IOException, IllegalArgumentException {
        return new ServiceResponseBuilder<Object, ServiceException>(this.client.getMapperAdapter())
                .register(200, new TypeToken<Object>() { }.getType())
                .build(response);
    }

    /**
     * Posts new data rows into the specified table.
     *
     * @param collectionName The workspace collection name
     * @param workspaceId The workspace id
     * @param datasetKey The dataset id
     * @param tableName The table name
     * @param requestMessage The request message
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the Object object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Object> postRows(String collectionName, String workspaceId, String datasetKey, String tableName, Object requestMessage) throws ServiceException, IOException, IllegalArgumentException {
        if (collectionName == null) {
            throw new IllegalArgumentException("Parameter collectionName is required and cannot be null.");
        }
        if (workspaceId == null) {
            throw new IllegalArgumentException("Parameter workspaceId is required and cannot be null.");
        }
        if (datasetKey == null) {
            throw new IllegalArgumentException("Parameter datasetKey is required and cannot be null.");
        }
        if (tableName == null) {
            throw new IllegalArgumentException("Parameter tableName is required and cannot be null.");
        }
        if (requestMessage == null) {
            throw new IllegalArgumentException("Parameter requestMessage is required and cannot be null.");
        }
        Call<ResponseBody> call = service.postRows(collectionName, workspaceId, datasetKey, tableName, requestMessage);
        return postRowsDelegate(call.execute());
    }

    /**
     * Posts new data rows into the specified table.
     *
     * @param collectionName The workspace collection name
     * @param workspaceId The workspace id
     * @param datasetKey The dataset id
     * @param tableName The table name
     * @param requestMessage The request message
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link Call} object
     */
    public ServiceCall postRowsAsync(String collectionName, String workspaceId, String datasetKey, String tableName, Object requestMessage, final ServiceCallback<Object> serviceCallback) throws IllegalArgumentException {
        if (serviceCallback == null) {
            throw new IllegalArgumentException("ServiceCallback is required for async calls.");
        }
        if (collectionName == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter collectionName is required and cannot be null."));
            return null;
        }
        if (workspaceId == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter workspaceId is required and cannot be null."));
            return null;
        }
        if (datasetKey == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter datasetKey is required and cannot be null."));
            return null;
        }
        if (tableName == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter tableName is required and cannot be null."));
            return null;
        }
        if (requestMessage == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter requestMessage is required and cannot be null."));
            return null;
        }
        Call<ResponseBody> call = service.postRows(collectionName, workspaceId, datasetKey, tableName, requestMessage);
        final ServiceCall serviceCall = new ServiceCall(call);
        call.enqueue(new ServiceResponseCallback<Object>(serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    serviceCallback.success(postRowsDelegate(response));
                } catch (ServiceException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Object> postRowsDelegate(Response<ResponseBody> response) throws ServiceException, IOException, IllegalArgumentException {
        return new ServiceResponseBuilder<Object, ServiceException>(this.client.getMapperAdapter())
                .register(200, new TypeToken<Object>() { }.getType())
                .build(response);
    }

    /**
     * Deletes all rows from the specified table.
     *
     * @param collectionName The workspace collection name
     * @param workspaceId The workspace id
     * @param datasetKey The dataset id
     * @param tableName The table name
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the Object object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Object> deleteRows(String collectionName, String workspaceId, String datasetKey, String tableName) throws ServiceException, IOException, IllegalArgumentException {
        if (collectionName == null) {
            throw new IllegalArgumentException("Parameter collectionName is required and cannot be null.");
        }
        if (workspaceId == null) {
            throw new IllegalArgumentException("Parameter workspaceId is required and cannot be null.");
        }
        if (datasetKey == null) {
            throw new IllegalArgumentException("Parameter datasetKey is required and cannot be null.");
        }
        if (tableName == null) {
            throw new IllegalArgumentException("Parameter tableName is required and cannot be null.");
        }
        Call<ResponseBody> call = service.deleteRows(collectionName, workspaceId, datasetKey, tableName);
        return deleteRowsDelegate(call.execute());
    }

    /**
     * Deletes all rows from the specified table.
     *
     * @param collectionName The workspace collection name
     * @param workspaceId The workspace id
     * @param datasetKey The dataset id
     * @param tableName The table name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link Call} object
     */
    public ServiceCall deleteRowsAsync(String collectionName, String workspaceId, String datasetKey, String tableName, final ServiceCallback<Object> serviceCallback) throws IllegalArgumentException {
        if (serviceCallback == null) {
            throw new IllegalArgumentException("ServiceCallback is required for async calls.");
        }
        if (collectionName == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter collectionName is required and cannot be null."));
            return null;
        }
        if (workspaceId == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter workspaceId is required and cannot be null."));
            return null;
        }
        if (datasetKey == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter datasetKey is required and cannot be null."));
            return null;
        }
        if (tableName == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter tableName is required and cannot be null."));
            return null;
        }
        Call<ResponseBody> call = service.deleteRows(collectionName, workspaceId, datasetKey, tableName);
        final ServiceCall serviceCall = new ServiceCall(call);
        call.enqueue(new ServiceResponseCallback<Object>(serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    serviceCallback.success(deleteRowsDelegate(response));
                } catch (ServiceException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Object> deleteRowsDelegate(Response<ResponseBody> response) throws ServiceException, IOException, IllegalArgumentException {
        return new ServiceResponseBuilder<Object, ServiceException>(this.client.getMapperAdapter())
                .register(200, new TypeToken<Object>() { }.getType())
                .build(response);
    }

    /**
     * Gets all tables within the specified dataset.
     *
     * @param collectionName The workspace collection name
     * @param workspaceId The workspace id
     * @param datasetKey The dataset id
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the ODataResponseListTable object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<ODataResponseListTable> getTables(String collectionName, String workspaceId, String datasetKey) throws ServiceException, IOException, IllegalArgumentException {
        if (collectionName == null) {
            throw new IllegalArgumentException("Parameter collectionName is required and cannot be null.");
        }
        if (workspaceId == null) {
            throw new IllegalArgumentException("Parameter workspaceId is required and cannot be null.");
        }
        if (datasetKey == null) {
            throw new IllegalArgumentException("Parameter datasetKey is required and cannot be null.");
        }
        Call<ResponseBody> call = service.getTables(collectionName, workspaceId, datasetKey);
        return getTablesDelegate(call.execute());
    }

    /**
     * Gets all tables within the specified dataset.
     *
     * @param collectionName The workspace collection name
     * @param workspaceId The workspace id
     * @param datasetKey The dataset id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link Call} object
     */
    public ServiceCall getTablesAsync(String collectionName, String workspaceId, String datasetKey, final ServiceCallback<ODataResponseListTable> serviceCallback) throws IllegalArgumentException {
        if (serviceCallback == null) {
            throw new IllegalArgumentException("ServiceCallback is required for async calls.");
        }
        if (collectionName == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter collectionName is required and cannot be null."));
            return null;
        }
        if (workspaceId == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter workspaceId is required and cannot be null."));
            return null;
        }
        if (datasetKey == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter datasetKey is required and cannot be null."));
            return null;
        }
        Call<ResponseBody> call = service.getTables(collectionName, workspaceId, datasetKey);
        final ServiceCall serviceCall = new ServiceCall(call);
        call.enqueue(new ServiceResponseCallback<ODataResponseListTable>(serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    serviceCallback.success(getTablesDelegate(response));
                } catch (ServiceException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<ODataResponseListTable> getTablesDelegate(Response<ResponseBody> response) throws ServiceException, IOException, IllegalArgumentException {
        return new ServiceResponseBuilder<ODataResponseListTable, ServiceException>(this.client.getMapperAdapter())
                .register(200, new TypeToken<ODataResponseListTable>() { }.getType())
                .build(response);
    }

    /**
     * Updates a schema and metadata for the specified table.
     *
     * @param collectionName The workspace collection name
     * @param workspaceId The workspace id
     * @param datasetKey The dataset id
     * @param tableName The table name
     * @param requestMessage The request message
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the Object object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Object> putTable(String collectionName, String workspaceId, String datasetKey, String tableName, Object requestMessage) throws ServiceException, IOException, IllegalArgumentException {
        if (collectionName == null) {
            throw new IllegalArgumentException("Parameter collectionName is required and cannot be null.");
        }
        if (workspaceId == null) {
            throw new IllegalArgumentException("Parameter workspaceId is required and cannot be null.");
        }
        if (datasetKey == null) {
            throw new IllegalArgumentException("Parameter datasetKey is required and cannot be null.");
        }
        if (tableName == null) {
            throw new IllegalArgumentException("Parameter tableName is required and cannot be null.");
        }
        if (requestMessage == null) {
            throw new IllegalArgumentException("Parameter requestMessage is required and cannot be null.");
        }
        Call<ResponseBody> call = service.putTable(collectionName, workspaceId, datasetKey, tableName, requestMessage);
        return putTableDelegate(call.execute());
    }

    /**
     * Updates a schema and metadata for the specified table.
     *
     * @param collectionName The workspace collection name
     * @param workspaceId The workspace id
     * @param datasetKey The dataset id
     * @param tableName The table name
     * @param requestMessage The request message
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link Call} object
     */
    public ServiceCall putTableAsync(String collectionName, String workspaceId, String datasetKey, String tableName, Object requestMessage, final ServiceCallback<Object> serviceCallback) throws IllegalArgumentException {
        if (serviceCallback == null) {
            throw new IllegalArgumentException("ServiceCallback is required for async calls.");
        }
        if (collectionName == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter collectionName is required and cannot be null."));
            return null;
        }
        if (workspaceId == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter workspaceId is required and cannot be null."));
            return null;
        }
        if (datasetKey == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter datasetKey is required and cannot be null."));
            return null;
        }
        if (tableName == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter tableName is required and cannot be null."));
            return null;
        }
        if (requestMessage == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter requestMessage is required and cannot be null."));
            return null;
        }
        Call<ResponseBody> call = service.putTable(collectionName, workspaceId, datasetKey, tableName, requestMessage);
        final ServiceCall serviceCall = new ServiceCall(call);
        call.enqueue(new ServiceResponseCallback<Object>(serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    serviceCallback.success(putTableDelegate(response));
                } catch (ServiceException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Object> putTableDelegate(Response<ResponseBody> response) throws ServiceException, IOException, IllegalArgumentException {
        return new ServiceResponseBuilder<Object, ServiceException>(this.client.getMapperAdapter())
                .register(200, new TypeToken<Object>() { }.getType())
                .build(response);
    }

    /**
     * Gets the dataset metadata for the specifeid dataset id.
     *
     * @param collectionName The workspace collection name
     * @param workspaceId The workspace id
     * @param datasetKey The dataset id
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the Dataset object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Dataset> getDatasetById(String collectionName, String workspaceId, String datasetKey) throws ServiceException, IOException, IllegalArgumentException {
        if (collectionName == null) {
            throw new IllegalArgumentException("Parameter collectionName is required and cannot be null.");
        }
        if (workspaceId == null) {
            throw new IllegalArgumentException("Parameter workspaceId is required and cannot be null.");
        }
        if (datasetKey == null) {
            throw new IllegalArgumentException("Parameter datasetKey is required and cannot be null.");
        }
        Call<ResponseBody> call = service.getDatasetById(collectionName, workspaceId, datasetKey);
        return getDatasetByIdDelegate(call.execute());
    }

    /**
     * Gets the dataset metadata for the specifeid dataset id.
     *
     * @param collectionName The workspace collection name
     * @param workspaceId The workspace id
     * @param datasetKey The dataset id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link Call} object
     */
    public ServiceCall getDatasetByIdAsync(String collectionName, String workspaceId, String datasetKey, final ServiceCallback<Dataset> serviceCallback) throws IllegalArgumentException {
        if (serviceCallback == null) {
            throw new IllegalArgumentException("ServiceCallback is required for async calls.");
        }
        if (collectionName == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter collectionName is required and cannot be null."));
            return null;
        }
        if (workspaceId == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter workspaceId is required and cannot be null."));
            return null;
        }
        if (datasetKey == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter datasetKey is required and cannot be null."));
            return null;
        }
        Call<ResponseBody> call = service.getDatasetById(collectionName, workspaceId, datasetKey);
        final ServiceCall serviceCall = new ServiceCall(call);
        call.enqueue(new ServiceResponseCallback<Dataset>(serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    serviceCallback.success(getDatasetByIdDelegate(response));
                } catch (ServiceException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Dataset> getDatasetByIdDelegate(Response<ResponseBody> response) throws ServiceException, IOException, IllegalArgumentException {
        return new ServiceResponseBuilder<Dataset, ServiceException>(this.client.getMapperAdapter())
                .register(200, new TypeToken<Dataset>() { }.getType())
                .build(response);
    }

    /**
     * Deletes the dataset with the specified id.
     *
     * @param collectionName The workspace collection name
     * @param workspaceId The workspace id
     * @param datasetKey The dataset id
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the Object object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Object> deleteDatasetById(String collectionName, String workspaceId, String datasetKey) throws ServiceException, IOException, IllegalArgumentException {
        if (collectionName == null) {
            throw new IllegalArgumentException("Parameter collectionName is required and cannot be null.");
        }
        if (workspaceId == null) {
            throw new IllegalArgumentException("Parameter workspaceId is required and cannot be null.");
        }
        if (datasetKey == null) {
            throw new IllegalArgumentException("Parameter datasetKey is required and cannot be null.");
        }
        Call<ResponseBody> call = service.deleteDatasetById(collectionName, workspaceId, datasetKey);
        return deleteDatasetByIdDelegate(call.execute());
    }

    /**
     * Deletes the dataset with the specified id.
     *
     * @param collectionName The workspace collection name
     * @param workspaceId The workspace id
     * @param datasetKey The dataset id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link Call} object
     */
    public ServiceCall deleteDatasetByIdAsync(String collectionName, String workspaceId, String datasetKey, final ServiceCallback<Object> serviceCallback) throws IllegalArgumentException {
        if (serviceCallback == null) {
            throw new IllegalArgumentException("ServiceCallback is required for async calls.");
        }
        if (collectionName == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter collectionName is required and cannot be null."));
            return null;
        }
        if (workspaceId == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter workspaceId is required and cannot be null."));
            return null;
        }
        if (datasetKey == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter datasetKey is required and cannot be null."));
            return null;
        }
        Call<ResponseBody> call = service.deleteDatasetById(collectionName, workspaceId, datasetKey);
        final ServiceCall serviceCall = new ServiceCall(call);
        call.enqueue(new ServiceResponseCallback<Object>(serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    serviceCallback.success(deleteDatasetByIdDelegate(response));
                } catch (ServiceException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Object> deleteDatasetByIdDelegate(Response<ResponseBody> response) throws ServiceException, IOException, IllegalArgumentException {
        return new ServiceResponseBuilder<Object, ServiceException>(this.client.getMapperAdapter())
                .register(200, new TypeToken<Object>() { }.getType())
                .build(response);
    }

    /**
     * Gets a list of bound gateway datasources for the specified dataset.
     *
     * @param collectionName The workspace collection name
     * @param workspaceId The workspace id
     * @param datasetKey The dataset id
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the ODataResponseListGatewayDatasource object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<ODataResponseListGatewayDatasource> getGatewayDatasources(String collectionName, String workspaceId, String datasetKey) throws ServiceException, IOException, IllegalArgumentException {
        if (collectionName == null) {
            throw new IllegalArgumentException("Parameter collectionName is required and cannot be null.");
        }
        if (workspaceId == null) {
            throw new IllegalArgumentException("Parameter workspaceId is required and cannot be null.");
        }
        if (datasetKey == null) {
            throw new IllegalArgumentException("Parameter datasetKey is required and cannot be null.");
        }
        Call<ResponseBody> call = service.getGatewayDatasources(collectionName, workspaceId, datasetKey);
        return getGatewayDatasourcesDelegate(call.execute());
    }

    /**
     * Gets a list of bound gateway datasources for the specified dataset.
     *
     * @param collectionName The workspace collection name
     * @param workspaceId The workspace id
     * @param datasetKey The dataset id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link Call} object
     */
    public ServiceCall getGatewayDatasourcesAsync(String collectionName, String workspaceId, String datasetKey, final ServiceCallback<ODataResponseListGatewayDatasource> serviceCallback) throws IllegalArgumentException {
        if (serviceCallback == null) {
            throw new IllegalArgumentException("ServiceCallback is required for async calls.");
        }
        if (collectionName == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter collectionName is required and cannot be null."));
            return null;
        }
        if (workspaceId == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter workspaceId is required and cannot be null."));
            return null;
        }
        if (datasetKey == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter datasetKey is required and cannot be null."));
            return null;
        }
        Call<ResponseBody> call = service.getGatewayDatasources(collectionName, workspaceId, datasetKey);
        final ServiceCall serviceCall = new ServiceCall(call);
        call.enqueue(new ServiceResponseCallback<ODataResponseListGatewayDatasource>(serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    serviceCallback.success(getGatewayDatasourcesDelegate(response));
                } catch (ServiceException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<ODataResponseListGatewayDatasource> getGatewayDatasourcesDelegate(Response<ResponseBody> response) throws ServiceException, IOException, IllegalArgumentException {
        return new ServiceResponseBuilder<ODataResponseListGatewayDatasource, ServiceException>(this.client.getMapperAdapter())
                .register(200, new TypeToken<ODataResponseListGatewayDatasource>() { }.getType())
                .build(response);
    }

    /**
     * Gets a list of datasource for the specified dataset.
     *
     * @param collectionName The workspace collection name
     * @param workspaceId The workspace id
     * @param datasetKey the String value
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the ODataResponseListDatasource object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<ODataResponseListDatasource> getDatasources(String collectionName, String workspaceId, String datasetKey) throws ServiceException, IOException, IllegalArgumentException {
        if (collectionName == null) {
            throw new IllegalArgumentException("Parameter collectionName is required and cannot be null.");
        }
        if (workspaceId == null) {
            throw new IllegalArgumentException("Parameter workspaceId is required and cannot be null.");
        }
        if (datasetKey == null) {
            throw new IllegalArgumentException("Parameter datasetKey is required and cannot be null.");
        }
        Call<ResponseBody> call = service.getDatasources(collectionName, workspaceId, datasetKey);
        return getDatasourcesDelegate(call.execute());
    }

    /**
     * Gets a list of datasource for the specified dataset.
     *
     * @param collectionName The workspace collection name
     * @param workspaceId The workspace id
     * @param datasetKey the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link Call} object
     */
    public ServiceCall getDatasourcesAsync(String collectionName, String workspaceId, String datasetKey, final ServiceCallback<ODataResponseListDatasource> serviceCallback) throws IllegalArgumentException {
        if (serviceCallback == null) {
            throw new IllegalArgumentException("ServiceCallback is required for async calls.");
        }
        if (collectionName == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter collectionName is required and cannot be null."));
            return null;
        }
        if (workspaceId == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter workspaceId is required and cannot be null."));
            return null;
        }
        if (datasetKey == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter datasetKey is required and cannot be null."));
            return null;
        }
        Call<ResponseBody> call = service.getDatasources(collectionName, workspaceId, datasetKey);
        final ServiceCall serviceCall = new ServiceCall(call);
        call.enqueue(new ServiceResponseCallback<ODataResponseListDatasource>(serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    serviceCallback.success(getDatasourcesDelegate(response));
                } catch (ServiceException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<ODataResponseListDatasource> getDatasourcesDelegate(Response<ResponseBody> response) throws ServiceException, IOException, IllegalArgumentException {
        return new ServiceResponseBuilder<ODataResponseListDatasource, ServiceException>(this.client.getMapperAdapter())
                .register(200, new TypeToken<ODataResponseListDatasource>() { }.getType())
                .build(response);
    }

    /**
     * Sets all connections for the specified dataset.
     *
     * @param collectionName The workspace collection name
     * @param workspaceId The workspace id
     * @param datasetKey The dataset id
     * @param parameters The body
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the Object object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Object> setAllConnections(String collectionName, String workspaceId, String datasetKey, Map<String, Object> parameters) throws ServiceException, IOException, IllegalArgumentException {
        if (collectionName == null) {
            throw new IllegalArgumentException("Parameter collectionName is required and cannot be null.");
        }
        if (workspaceId == null) {
            throw new IllegalArgumentException("Parameter workspaceId is required and cannot be null.");
        }
        if (datasetKey == null) {
            throw new IllegalArgumentException("Parameter datasetKey is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        Call<ResponseBody> call = service.setAllConnections(collectionName, workspaceId, datasetKey, parameters);
        return setAllConnectionsDelegate(call.execute());
    }

    /**
     * Sets all connections for the specified dataset.
     *
     * @param collectionName The workspace collection name
     * @param workspaceId The workspace id
     * @param datasetKey The dataset id
     * @param parameters The body
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link Call} object
     */
    public ServiceCall setAllConnectionsAsync(String collectionName, String workspaceId, String datasetKey, Map<String, Object> parameters, final ServiceCallback<Object> serviceCallback) throws IllegalArgumentException {
        if (serviceCallback == null) {
            throw new IllegalArgumentException("ServiceCallback is required for async calls.");
        }
        if (collectionName == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter collectionName is required and cannot be null."));
            return null;
        }
        if (workspaceId == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter workspaceId is required and cannot be null."));
            return null;
        }
        if (datasetKey == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter datasetKey is required and cannot be null."));
            return null;
        }
        if (parameters == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
            return null;
        }
        Validator.validate(parameters, serviceCallback);
        Call<ResponseBody> call = service.setAllConnections(collectionName, workspaceId, datasetKey, parameters);
        final ServiceCall serviceCall = new ServiceCall(call);
        call.enqueue(new ServiceResponseCallback<Object>(serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    serviceCallback.success(setAllConnectionsDelegate(response));
                } catch (ServiceException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Object> setAllConnectionsDelegate(Response<ResponseBody> response) throws ServiceException, IOException, IllegalArgumentException {
        return new ServiceResponseBuilder<Object, ServiceException>(this.client.getMapperAdapter())
                .register(200, new TypeToken<Object>() { }.getType())
                .build(response);
    }

}
