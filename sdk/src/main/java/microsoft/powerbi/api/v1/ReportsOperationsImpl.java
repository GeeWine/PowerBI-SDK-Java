/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package microsoft.powerbi.api.v1;

import com.google.common.reflect.TypeToken;
import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import java.io.IOException;
import microsoft.powerbi.api.v1.models.ODataResponseListReport;
import okhttp3.ResponseBody;
import retrofit2.Call;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.Response;
import retrofit2.Retrofit;

/**
 * An instance of this class provides access to all the operations defined
 * in ReportsOperations.
 */
public final class ReportsOperationsImpl implements ReportsOperations {
    /** The Retrofit service to perform REST calls. */
    private ReportsService service;
    /** The service client containing this operation class. */
    private PowerBIClient client;

    /**
     * Initializes an instance of ReportsOperations.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ReportsOperationsImpl(Retrofit retrofit, PowerBIClient client) {
        this.service = retrofit.create(ReportsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ReportsOperations to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ReportsService {
        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("v1.0/collections/{collectionName}/workspaces/{workspaceId}/reports")
        Call<ResponseBody> getReports(@Path("collectionName") String collectionName, @Path("workspaceId") String workspaceId);

    }

    /**
     * Gets a list of reports available within the specified workspace.
     *
     * @param collectionName The workspace collection name
     * @param workspaceId The workspace id
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the ODataResponseListReport object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<ODataResponseListReport> getReports(String collectionName, String workspaceId) throws ServiceException, IOException, IllegalArgumentException {
        if (collectionName == null) {
            throw new IllegalArgumentException("Parameter collectionName is required and cannot be null.");
        }
        if (workspaceId == null) {
            throw new IllegalArgumentException("Parameter workspaceId is required and cannot be null.");
        }
        Call<ResponseBody> call = service.getReports(collectionName, workspaceId);
        return getReportsDelegate(call.execute());
    }

    /**
     * Gets a list of reports available within the specified workspace.
     *
     * @param collectionName The workspace collection name
     * @param workspaceId The workspace id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link Call} object
     */
    public ServiceCall getReportsAsync(String collectionName, String workspaceId, final ServiceCallback<ODataResponseListReport> serviceCallback) throws IllegalArgumentException {
        if (serviceCallback == null) {
            throw new IllegalArgumentException("ServiceCallback is required for async calls.");
        }
        if (collectionName == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter collectionName is required and cannot be null."));
            return null;
        }
        if (workspaceId == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter workspaceId is required and cannot be null."));
            return null;
        }
        Call<ResponseBody> call = service.getReports(collectionName, workspaceId);
        final ServiceCall serviceCall = new ServiceCall(call);
        call.enqueue(new ServiceResponseCallback<ODataResponseListReport>(serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    serviceCallback.success(getReportsDelegate(response));
                } catch (ServiceException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<ODataResponseListReport> getReportsDelegate(Response<ResponseBody> response) throws ServiceException, IOException, IllegalArgumentException {
        return new ServiceResponseBuilder<ODataResponseListReport, ServiceException>(this.client.getMapperAdapter())
                .register(200, new TypeToken<ODataResponseListReport>() { }.getType())
                .build(response);
    }

}
