/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package microsoft.powerbi.api.v1;

import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import microsoft.powerbi.api.v1.models.ImportInfo;
import microsoft.powerbi.api.v1.models.ImportModel;
import microsoft.powerbi.api.v1.models.ODataResponseListImport;

/**
 * An instance of this class provides access to all the operations defined
 * in ImportsOperations.
 */
public interface ImportsOperations {
    /**
     * Returns a list of imports for the specified workspace.
     *
     * @param collectionName The workspace collection name
     * @param workspaceId The workspace id
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the ODataResponseListImport object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<ODataResponseListImport> getImports(String collectionName, String workspaceId) throws ServiceException, IOException, IllegalArgumentException;

    /**
     * Returns a list of imports for the specified workspace.
     *
     * @param collectionName The workspace collection name
     * @param workspaceId The workspace id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall getImportsAsync(String collectionName, String workspaceId, final ServiceCallback<ODataResponseListImport> serviceCallback) throws IllegalArgumentException;

    /**
     * Creates a new import using the specified import info.
     *
     * @param collectionName The workspace collection name
     * @param workspaceId The workspace id
     * @param datasetDisplayName The display name of the dataset
     * @param importInfo The import to post
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the ImportModel object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<ImportModel> postImport(String collectionName, String workspaceId, String datasetDisplayName, ImportInfo importInfo) throws ServiceException, IOException, IllegalArgumentException;

    /**
     * Creates a new import using the specified import info.
     *
     * @param collectionName The workspace collection name
     * @param workspaceId The workspace id
     * @param datasetDisplayName The display name of the dataset
     * @param importInfo The import to post
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall postImportAsync(String collectionName, String workspaceId, String datasetDisplayName, ImportInfo importInfo, final ServiceCallback<ImportModel> serviceCallback) throws IllegalArgumentException;
    /**
     * Creates a new import using the specified import info.
     *
     * @param collectionName The workspace collection name
     * @param workspaceId The workspace id
     * @param datasetDisplayName The display name of the dataset
     * @param importInfo The import to post
     * @param nameConflict Determines what to do if a dataset with the same name already exists
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the ImportModel object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<ImportModel> postImport(String collectionName, String workspaceId, String datasetDisplayName, ImportInfo importInfo, String nameConflict) throws ServiceException, IOException, IllegalArgumentException;

    /**
     * Creates a new import using the specified import info.
     *
     * @param collectionName The workspace collection name
     * @param workspaceId The workspace id
     * @param datasetDisplayName The display name of the dataset
     * @param importInfo The import to post
     * @param nameConflict Determines what to do if a dataset with the same name already exists
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall postImportAsync(String collectionName, String workspaceId, String datasetDisplayName, ImportInfo importInfo, String nameConflict, final ServiceCallback<ImportModel> serviceCallback) throws IllegalArgumentException;

    /**
     * Gets the import metadata for the specifed import id.
     *
     * @param collectionName The workspace collection name
     * @param workspaceId The workspace id
     * @param importId The import id
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the ImportModel object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<ImportModel> getImportById(String collectionName, String workspaceId, String importId) throws ServiceException, IOException, IllegalArgumentException;

    /**
     * Gets the import metadata for the specifed import id.
     *
     * @param collectionName The workspace collection name
     * @param workspaceId The workspace id
     * @param importId The import id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall getImportByIdAsync(String collectionName, String workspaceId, String importId, final ServiceCallback<ImportModel> serviceCallback) throws IllegalArgumentException;

}
