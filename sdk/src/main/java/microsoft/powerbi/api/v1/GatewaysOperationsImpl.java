/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package microsoft.powerbi.api.v1;

import com.google.common.reflect.TypeToken;
import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.Call;
import retrofit2.http.Body;
import retrofit2.http.Headers;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.Response;
import retrofit2.Retrofit;

/**
 * An instance of this class provides access to all the operations defined
 * in GatewaysOperations.
 */
public final class GatewaysOperationsImpl implements GatewaysOperations {
    /** The Retrofit service to perform REST calls. */
    private GatewaysService service;
    /** The service client containing this operation class. */
    private PowerBIClient client;

    /**
     * Initializes an instance of GatewaysOperations.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public GatewaysOperationsImpl(Retrofit retrofit, PowerBIClient client) {
        this.service = retrofit.create(GatewaysService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for GatewaysOperations to be
     * used by Retrofit to perform actually REST calls.
     */
    interface GatewaysService {
        @Headers("Content-Type: application/json; charset=utf-8")
        @PATCH("v1.0/collections/{collectionName}/workspaces/{workspaceId}/gateways/{gatewayId}/datasources/{datasourceId}")
        Call<ResponseBody> patchDatasource(@Path("collectionName") String collectionName, @Path("workspaceId") String workspaceId, @Path("gatewayId") String gatewayId, @Path("datasourceId") String datasourceId, @Body Object datasourceDelta);

    }

    /**
     * Updates the credentials for the specified datasource.
     *
     * @param collectionName The workspace collection name
     * @param workspaceId The workspace id
     * @param gatewayId The gateway id
     * @param datasourceId The datasource id
     * @param datasourceDelta The datasource changes
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the Object object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Object> patchDatasource(String collectionName, String workspaceId, String gatewayId, String datasourceId, Object datasourceDelta) throws ServiceException, IOException, IllegalArgumentException {
        if (collectionName == null) {
            throw new IllegalArgumentException("Parameter collectionName is required and cannot be null.");
        }
        if (workspaceId == null) {
            throw new IllegalArgumentException("Parameter workspaceId is required and cannot be null.");
        }
        if (gatewayId == null) {
            throw new IllegalArgumentException("Parameter gatewayId is required and cannot be null.");
        }
        if (datasourceId == null) {
            throw new IllegalArgumentException("Parameter datasourceId is required and cannot be null.");
        }
        if (datasourceDelta == null) {
            throw new IllegalArgumentException("Parameter datasourceDelta is required and cannot be null.");
        }
        Call<ResponseBody> call = service.patchDatasource(collectionName, workspaceId, gatewayId, datasourceId, datasourceDelta);
        return patchDatasourceDelegate(call.execute());
    }

    /**
     * Updates the credentials for the specified datasource.
     *
     * @param collectionName The workspace collection name
     * @param workspaceId The workspace id
     * @param gatewayId The gateway id
     * @param datasourceId The datasource id
     * @param datasourceDelta The datasource changes
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link Call} object
     */
    public ServiceCall patchDatasourceAsync(String collectionName, String workspaceId, String gatewayId, String datasourceId, Object datasourceDelta, final ServiceCallback<Object> serviceCallback) throws IllegalArgumentException {
        if (serviceCallback == null) {
            throw new IllegalArgumentException("ServiceCallback is required for async calls.");
        }
        if (collectionName == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter collectionName is required and cannot be null."));
            return null;
        }
        if (workspaceId == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter workspaceId is required and cannot be null."));
            return null;
        }
        if (gatewayId == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter gatewayId is required and cannot be null."));
            return null;
        }
        if (datasourceId == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter datasourceId is required and cannot be null."));
            return null;
        }
        if (datasourceDelta == null) {
            serviceCallback.failure(new IllegalArgumentException("Parameter datasourceDelta is required and cannot be null."));
            return null;
        }
        Call<ResponseBody> call = service.patchDatasource(collectionName, workspaceId, gatewayId, datasourceId, datasourceDelta);
        final ServiceCall serviceCall = new ServiceCall(call);
        call.enqueue(new ServiceResponseCallback<Object>(serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    serviceCallback.success(patchDatasourceDelegate(response));
                } catch (ServiceException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return serviceCall;
    }

    private ServiceResponse<Object> patchDatasourceDelegate(Response<ResponseBody> response) throws ServiceException, IOException, IllegalArgumentException {
        return new ServiceResponseBuilder<Object, ServiceException>(this.client.getMapperAdapter())
                .register(200, new TypeToken<Object>() { }.getType())
                .build(response);
    }

}
